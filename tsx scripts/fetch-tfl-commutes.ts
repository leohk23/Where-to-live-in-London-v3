/* scripts/fetch-tfl-commutes.ts
 * Queries TfL Journey Planner to build src/commute-times.ts
 * Node 18+ required (for global fetch).
 */

import fs from "fs";
import path from "path";
// import dotenv from "dotenv"; dotenv.config(); // uncomment if you use dotenv

type Minutes = number;

export interface CommuteTimes {
  [homeLocation: string]: {
    [workLocation: string]: Minutes;
  };
}

/** Display name → TfL-friendly location string (usually a specific station). */
const homes: Record<string, string> = {
  "Brixton": "Brixton Underground Station",
  "Fulham": "Fulham Broadway Underground Station",
  "Tooting": "Tooting Broadway Underground Station",
  "Sutton": "Sutton (London) Rail Station",
  "New Malden": "New Malden Rail Station",
  "Wimbledon": "Wimbledon Underground Station",
  "Richmond": "Richmond (London) Rail Station",
  "Ealing": "Ealing Broadway Underground Station",
  "Hounslow": "Hounslow Central Underground Station",
  "Croydon": "East Croydon Rail Station",
  "Wimbledon Park": "Wimbledon Park Underground Station",
  "High Barnet": "High Barnet Underground Station",
  "Sutton Cheam": "Cheam Rail Station",
  "Acton Common": "Acton Town Underground Station",
  "South Ealing": "South Ealing Underground Station",
  "Southfields": "Southfields Underground Station",
};

/** Work hub → TfL-friendly station */
const works: Record<string, string> = {
  "City of London": "Bank Underground Station",
  "Canary Wharf": "Canary Wharf Underground Station",
  "King's Cross": "King's Cross St. Pancras Underground Station",
  "Shoreditch": "Shoreditch High Street Rail Station",
  "Westminster": "Westminster Underground Station",
  "South Bank": "Waterloo Underground Station",
  "Paddington": "Paddington Underground Station",
  "Victoria": "Victoria Underground Station",
  "Liverpool Street": "Liverpool Street Underground Station",
  "Oxford Circus": "Oxford Circus Underground Station",
  "Green Park": "Green Park Underground Station",
};

/** TfL API config */
const TFL_BASE = "https://api.tfl.gov.uk/Journey/JourneyResults";
// Add/adjust modes: tube, overground, elizabeth-line, dlr, tram, national-rail
const modes = ["tube", "overground", "elizabeth-line", "dlr", "tram", "national-rail"];

const APP_ID = process.env.TFL_APP_ID;
const APP_KEY = process.env.TFL_APP_KEY;

// polite rate limiting between requests (ms)
const PAUSE_MS = 350;

// simple sleep
const wait = (ms: number) => new Promise((r) => setTimeout(r, ms));

/** Query TfL for a single from→to and return minutes (or 0 on failure). */
async function getDurationMinutes(fromLabel: string, toLabel: string): Promise<Minutes> {
  const from = encodeURIComponent(homes[fromLabel]);
  const to = encodeURIComponent(works[toLabel]);

  const searchParams = new URLSearchParams({
    mode: modes.join(","),
    timeIs: "Departing",       // Departing now
    // You can pin a time/date if you prefer consistent comparisons:
    // date: "2025-09-01", time: "08:30"
  });

  // Add credentials if present
  if (APP_ID && APP_KEY) {
    searchParams.set("app_id", APP_ID);
    searchParams.set("app_key", APP_KEY);
  }

  const url = `${TFL_BASE}/${from}/to/${to}?${searchParams.toString()}`;

  // up to 2 retries for transient errors
  for (let attempt = 1; attempt <= 3; attempt++) {
    try {
      const res = await fetch(url, { headers: { "accept": "application/json" } });
      if (!res.ok) throw new Error(`HTTP ${res.status}`);
      const data = await res.json() as any;

      // TfL Journey Planner returns an array of journeys; each has a 'duration' (minutes)
      const journeys = data?.journeys as Array<{ duration?: number }> | undefined;
      const best = journeys && journeys.length ? journeys[0]?.duration : undefined;

      if (typeof best === "number" && isFinite(best)) {
        return Math.round(best);
      }
      // If no journeys, fall back to 0
      return 0;
    } catch (err) {
      if (attempt === 3) {
        console.warn(`Failed ${fromLabel} → ${toLabel}: ${String(err)}`);
        return 0;
      }
      await wait(400 * attempt); // backoff
    }
  }

  return 0;
}

async function main() {
  const out: CommuteTimes = {};

  const homeKeys = Object.keys(homes);
  const workKeys = Object.keys(works);

  for (const h of homeKeys) {
    out[h] = {};
    for (const w of workKeys) {
      // be polite to TfL API
      await wait(PAUSE_MS);
      const mins = await getDurationMinutes(h, w);
      out[h][w] = mins;
      console.log(`${h} → ${w}: ${mins} min`);
    }
  }

  const banner = `/**
 * AUTO-GENERATED by scripts/fetch-tfl-commutes.ts
 * To regenerate, run: npm run fetch-commutes:tfl
 * Values are one-way minutes from TfL Journey Planner (first itinerary).
 */
`;

  const file = `${banner}
export interface CommuteTimes {
  [homeLocation: string]: {
    [workLocation: string]: number;
  };
}

export const commuteTimes: CommuteTimes = ${JSON.stringify(out, null, 2)};
`;

  const outPath = path.resolve(process.cwd(), "src/commute-times.ts");
  fs.writeFileSync(outPath, file, "utf8");
  console.log(`\nWrote ${outPath}`);
}

main().catch((e) => {
  console.error(e);
  process.exit(1);
});
